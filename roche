#!/usr/bin/env bash

ProgName=$(basename $0)
  
sub_help(){
    echo "Usage: $ProgName <subcommand> [options]"
    echo "Subcommands:"
    echo "    init          Create a function file in the current directory"
    echo "    build         Build a docker container using the debug function image"
    echo "    build-proj    Build container assuming functions.rs in src"
    echo "    build-test    Build container assuming functions.rs in src"
    echo "    release       Build a docker container using the release function image"
    echo "    run           Runs the function in the current directory"
    echo "    kill          Stops the container associated with the current directory"
    echo "    gen           Generate a release Dockerfile for an external build pipeline"
    echo "    fmt           Run rustfmt against functions.rs to make it pretty"
    echo ""
}

sub_init(){
    echo -e ${function_template} > functions.rs
}

sub_fmt() {
    rustfmt --edition=2018 functions.rs
}

sub_run() {
    getdevimagetag
    docker run -p 8080:8080 $imagetag &
}

sub_kill() {
    getdevimagetag
    docker kill $(docker ps | grep $imagetag | cut -d' ' -f1)
}

sub_build-test() {
    getdevimagetag
    cd src
    echo -e ${docker_debug_build} | docker build -t ${imagetag} -f- .
    cd ..
    docker run -p 8080:8080 $imagetag &
    cargo test
    docker kill $(docker ps | grep $imagetag | cut -d' ' -f1)
}

sub_build-proj() {
    getdevimagetag
    cd src
    echo -e ${docker_debug_build} | docker build -t ${imagetag} -f- .
    cd ..
}

sub_build(){
    getdevimagetag
    echo -e ${docker_debug_build} | docker build -t ${imagetag} -f- .
}

sub_release(){
    getimagetag
    echo -e ${docker_build} | docker build -t ${imagetag} -f- .
}

sub_gen(){
    echo -e ${docker_build} > Dockerfile
}


getdevimagetag() {
    imagetag=$1
    if [ "${imagetag}" == "" ]; then
        echo "No image tag provided."
        namespace=$(cut -d " " -f3 <<< $(docker info | grep Username))
        if [ "${namespace}" == "" ]; then
            namespace=$(podman login --get-login)
        fi
        if [ "${namespace}" == "" ]; then
            echo "Failed to get username from docker or podman."
            echo "Please login to one of them for this script to work"
            exit 1
        fi
        
        imagename=${PWD##*/}
        imagetag=$namespace/dev-$imagename:latest
        echo "Going to use: $imagetag"
    fi
}

getimagetag() {
    imagetag=$1
    if [ "${imagetag}" == "" ]; then
        echo "No image tag provided."
        namespace=$(cut -d " " -f3 <<< $(docker info | grep Username))
        if [ "${namespace}" == "" ]; then
            namespace=$(podman login --get-login)
        fi
        if [ "${namespace}" == "" ]; then
            echo "Failed to get username from docker or podman."
            echo "Please login to one of them for this script to work"
            exit 1
        fi
        
        imagename=${PWD##*/}
        imagetag=$namespace/$imagename:latest
        echo "Going to use: $imagetag"
    fi
}


declare -r function_template=$(cat <<-EOM
    pub fn handler() -> tide::Server<()> {\n    
        let mut api = tide::new();\n
        api.at("/").get(|_| async { Ok("Hello, world!") });\n
        api\n
    }\n
EOM
)

declare -r docker_build=$(cat <<-EOM
FROM quay.io/roche/baseimage as builder\n\n
COPY functions.rs /app-build/src/app/\n\n
RUN cargo build --release\n\n
FROM quay.io/roche/alpine:3.12\n\n
RUN apk add --no-cache libgcc\n\n
RUN addgroup -S rocheuser && adduser -S rocheuser -G rocheuser\n\n
WORKDIR "/app"\n\n
COPY --from=builder --chown=rocheuser /app-build/run.sh /app-build/Cargo.toml /app-build/target/release/roche-service ./\n\n
USER rocheuser\n\n
ENV PORT 8080\n\n
EXPOSE 8080\n\n
CMD ["./run.sh"]\n\n
EOM
)
declare docker_debug_build=$(cat <<-EOM
FROM quay.io/roche/dev-baseimage as builder\n\n
COPY . /app-build/src/app/\n\n
RUN cargo build\n\n
FROM quay.io/roche/alpine:3.12\n\n
RUN apk add --no-cache libgcc\n\n
RUN addgroup -S rocheuser && adduser -S rocheuser -G rocheuser\n\n
WORKDIR "/app"\n\n
EOM
)
declare env_string

if [[ -f "./.env" ]]; then
    env_string="COPY --from=builder --chown=rocheuser /app-build/run.sh /app-build/Cargo.toml /app-build/target/debug/roche-service /app-build/src/app/.env* ./\n\n"
else
    env_string="COPY --from=builder --chown=rocheuser /app-build/run.sh /app-build/Cargo.toml /app-build/target/debug/roche-service ./\n\n"
fi

declare -r tail=$(cat <<-EOM 
USER rocheuser\n\n
ENV PORT 8080\n\n
EXPOSE 8080\n\n
CMD ["./run.sh"]\n\n
EOM
)
docker_debug_build=$docker_debug_build$env_string$tail

declare -r subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} $@
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$ProgName --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac